{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../EventsList';\nimport { Suspense } from 'react';\nfunction EventPages() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return {/*<Suspense fallback={<p style={{textAlign: \"center\"}}>Loading...</p>}>\r\n          <Await resolve={events}>\r\n          {(loadedEvents)=><EventsList events={loadedEvents}/> }\r\n          </Await>\r\n          </Suspense>*/};\n}\n_s(EventPages, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventPages;\nexport default EventPages;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    /*\r\n    throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n        status: 500,\r\n    })*/\n    console.log(\"The response\");\n    console.log(response);\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport function loader() {\n  return defer({\n    //  events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventPages\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","Suspense","EventPages","_s","events","_c","loadEvents","response","fetch","ok","console","log","message","status","resData","loader","$RefreshReg$"],"sources":["C:/Users/anton/Documents/react-project/new-react-frontend/frontend/src/components/pages/EventPages.jsx"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom'\r\nimport EventsList from '../EventsList';\r\nimport { Suspense } from 'react';\r\n\r\nfunction EventPages() {\r\n\r\n    const {events} = useLoaderData()\r\n     \r\n    return(\r\n        \r\n        {/*<Suspense fallback={<p style={{textAlign: \"center\"}}>Loading...</p>}>\r\n    <Await resolve={events}>\r\n        {(loadedEvents)=><EventsList events={loadedEvents}/> }\r\n    </Await>\r\n</Suspense>*/});\r\n}\r\n\r\nexport default EventPages;\r\n\r\nasync function loadEvents(){\r\n   \r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        /*\r\n        throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n            status: 500,\r\n        })*/\r\n        console.log(\"The response\")\r\n        console.log(response)\r\n        throw json(\r\n            { message: \"Could not fetch events.\" }, \r\n            {\r\n            status: 500,\r\n        }\r\n        )\r\n    } else {\r\n        const resData = await response.json();\r\n       \r\n        return resData.events;\r\n    }\r\n    \r\n \r\n}\r\nexport function loader() {\r\n   return defer({\r\n      //  events: loadEvents()\r\n    })\r\n\r\n}"],"mappings":";AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,eAAe;AACtC,SAASC,QAAQ,QAAQ,OAAO;AAEhC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAElB,MAAM;IAACC;EAAM,CAAC,GAAGR,aAAa,CAAC,CAAC;EAEhC,OAEI,CAAC;AACT;AACA;AACA;AACA,uBAJS,CAIK;AACd;AAACO,EAAA,CAXQD,UAAU;EAAA,QAEEN,aAAa;AAAA;AAAAS,EAAA,GAFzBH,UAAU;AAanB,eAAeA,UAAU;AAEzB,eAAeI,UAAUA,CAAA,EAAE;EAEvB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;AACR;AACA;AACA;IACQC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACrB,MAAMV,IAAI,CACN;MAAEe,OAAO,EAAE;IAA0B,CAAC,EACtC;MACAC,MAAM,EAAE;IACZ,CACA,CAAC;EACL,CAAC,MAAM;IACH,MAAMC,OAAO,GAAG,MAAMP,QAAQ,CAACV,IAAI,CAAC,CAAC;IAErC,OAAOiB,OAAO,CAACV,MAAM;EACzB;AAGJ;AACA,OAAO,SAASW,MAAMA,CAAA,EAAG;EACtB,OAAOjB,KAAK,CAAC;IACV;EAAA,CACD,CAAC;AAEN;AAAC,IAAAO,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}