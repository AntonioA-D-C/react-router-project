{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Documents\\\\react-project\\\\new-react-frontend\\\\frontend\\\\src\\\\components\\\\pages\\\\NewEventPage.jsx\";\nimport { Link, useParams, NavLink, json } from 'react-router-dom';\nimport EventForm from '../EventForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewEventPage() {\n  console.log(\"HELLO\");\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n_c = NewEventPage;\nexport default NewEventPage;\nexport async function action({\n  request,\n  params\n}) {\n  /*const data = await request.formData();\r\n     const eventData = {\r\n   title: data.get('title'),\r\n   image: data.get('image'),\r\n   date: data.get('date'),\r\n   description: data.get('description')\r\n  }\r\n  const response = await fetch('http://localhost:8080/events', {\r\n   method: \"POST\",\r\n   headers: {\r\n       \"Content-Type\": \"application/json\"\r\n   },\r\n   body: JSON.stringify(eventData)\r\n  });\r\n  if (!response.ok) {\r\n       throw json({ message: \"Could not save event\" }, { status: 500 })\r\n  } */\n  return null;\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["Link","useParams","NavLink","json","EventForm","jsxDEV","_jsxDEV","NewEventPage","console","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","params","$RefreshReg$"],"sources":["C:/Users/anton/Documents/react-project/new-react-frontend/frontend/src/components/pages/NewEventPage.jsx"],"sourcesContent":["import { Link, useParams, NavLink, json } from 'react-router-dom';\r\nimport EventForm from '../EventForm';\r\nfunction NewEventPage() {\r\n   console.log(\"HELLO\")\r\n    return (\r\n        <EventForm />\r\n    )\r\n}\r\nexport default NewEventPage\r\n\r\nexport async function action({ request, params }) {\r\n       /*const data = await request.formData();\r\n    \r\n    const eventData = {\r\n        title: data.get('title'),\r\n        image: data.get('image'),\r\n        date: data.get('date'),\r\n        description: data.get('description')\r\n    }\r\n    const response = await fetch('http://localhost:8080/events', {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(eventData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n\r\n\r\n        throw json({ message: \"Could not save event\" }, { status: 500 })\r\n    } */\r\n    return null;\r\n\r\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,IAAI,QAAQ,kBAAkB;AACjE,OAAOC,SAAS,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACrC,SAASC,YAAYA,CAAA,EAAG;EACrBC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACnB,oBACIH,OAAA,CAACF,SAAS;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAErB;AAACC,EAAA,GALQP,YAAY;AAMrB,eAAeA,YAAY;AAE3B,OAAO,eAAeQ,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAC3C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAKI,OAAO,IAAI;AAEf;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}